import { useState, useMemo } from "react";
import { Search, ExternalLink } from "lucide-react";

type GlossaryTerm = {
  id: number;
  term: string;
  definition: string;
  hasLink: boolean;
  letter: string;
};

const GlossaryPage = () => {
  const [searchQuery, setSearchQuery] = useState("");
  const [selectedLetter, setSelectedLetter] = useState("");

  const glossaryTerms = [
    {
      id: 1,
      term: "API token",
      definition:
        "A unique code generated by the API provider, granting users or applications access to specific actions. It serves as an authentication method for different scopes of access such as view, trade, perform payment operation, and admin access.",
      hasLink: false,
      letter: "A",
    },
    {
      id: 2,
      term: "Account currency",
      definition:
        "The currency you choose when opening a trading account with Sarthifx. All trading activities, including profits, losses, deposits, and withdrawals are done in the account currency. You can select your account currency upon sign-up, which can either be in fiat or cryptocurrencies.",
      hasLink: true,
      letter: "A",
    },
    {
      id: 3,
      term: "Base currency",
      definition:
        "The first currency listed in a currency pair. It shows how much the base currency is worth as measured against the quote currency.",
      hasLink: true,
      letter: "B",
    },
    {
      id: 4,
      term: "Base rate",
      definition:
        "The benchmark interest rate set by a central bank or monetary authority of a country. The base rate serves as the foundation for the interest rates charged by commercial banks when they lend money to customers.",
      hasLink: false,
      letter: "B",
    },
    // Add more terms here
  ];

  const alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ".split("");

  const filteredTerms = useMemo<Record<string, GlossaryTerm[]>>(() => {
    let terms: GlossaryTerm[] = glossaryTerms;

    if (searchQuery) {
      terms = terms.filter(
        (term) =>
          term.term.toLowerCase().includes(searchQuery.toLowerCase()) ||
          term.definition.toLowerCase().includes(searchQuery.toLowerCase())
      );
    }

    if (selectedLetter) {
      terms = terms.filter((term) => term.letter === selectedLetter);
    }

    return terms.reduce<Record<string, GlossaryTerm[]>>((acc, term) => {
      if (!acc[term.letter]) acc[term.letter] = [];
      acc[term.letter].push(term);
      return acc;
    }, {});
  }, [searchQuery, selectedLetter, glossaryTerms]);

  const availableLetters = useMemo(() => {
    return [...new Set(glossaryTerms.map((term) => term.letter))].sort();
  }, [glossaryTerms]);

  return (
    <div className="bg-[var(--bg-primary)] text-[var(--text-primary)] min-h-screen pt-20">
      {/* Hero Section */}
      <section className="py-20 px-6 md:px-12 max-w-5xl mx-auto text-center">
        <h1 className="text-4xl md:text-5xl font-bold mb-6">
          Glossary of trading terms
        </h1>
        <p className="text-lg md:text-xl mb-16 text-[var(--text-secondary)]">
          Our comprehensive list of all the trading-related terminologies that
          you need to know.
        </p>

        {/* Search Bar */}
        <div className="max-w-2xl mx-auto mb-16">
          <div className="relative">
            <div className="absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none">
              <Search className="w-5 h-5 text-[var(--text-secondary)]" />
            </div>
            <input
              type="text"
              placeholder="Search"
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="w-full pl-12 pr-4 py-4 text-lg rounded-full border border-white/20 bg-transparent focus:outline-none focus:border-white/40 transition-colors"
              style={{ color: "var(--text-primary)" }}
            />
          </div>
        </div>

        {/* Alphabet Navigation */}
        <div className="flex flex-wrap justify-center gap-2 mb-16">
          <button
            onClick={() => setSelectedLetter("")}
            className={`w-10 h-10 rounded-full font-medium transition-colors ${
              selectedLetter === ""
                ? "bg-white/20 text-white"
                : "text-gray-400 hover:text-white hover:bg-white/10"
            }`}
          >
            All
          </button>
          {alphabet.map((letter) => (
            <button
              key={letter}
              onClick={() => setSelectedLetter(letter)}
              className={`w-10 h-10 rounded-full font-medium transition-colors ${
                selectedLetter === letter
                  ? "bg-white/20 text-white"
                  : availableLetters.includes(letter)
                  ? "text-gray-400 hover:text-white hover:bg-white/10"
                  : "text-gray-600 cursor-not-allowed"
              }`}
              disabled={!availableLetters.includes(letter)}
            >
              {letter}
            </button>
          ))}
        </div>
      </section>

      {/* Glossary Terms */}
      <section className="py-12 px-6 md:px-12 max-w-5xl mx-auto">
        {Object.entries(filteredTerms)
          .sort()
          .map(([letter, terms]) => (
            <div key={letter} className="mb-16">
              <h2 className="text-3xl md:text-4xl font-bold mb-8">{letter}</h2>
              <div className="space-y-10">
                {terms.map((term) => (
                  <article
                    key={term.id}
                    className="border-b border-white/10 pb-8 last:border-b-0"
                  >
                    <h3 className="text-2xl md:text-3xl font-bold mb-4">
                      {term.term}
                    </h3>
                    <p className="text-lg md:text-xl text-[var(--text-secondary)] leading-relaxed">
                      {term.definition}
                    </p>
                    {term.hasLink && (
                      <p className="mt-4 flex items-center gap-2 text-[var(--text-secondary)]">
                        For more information, check out this{" "}
                        <a
                          href="#"
                          className="underline hover:no-underline text-[var(--text-accent-blue)] flex items-center gap-1"
                        >
                          blog article <ExternalLink className="w-4 h-4" />
                        </a>
                      </p>
                    )}
                  </article>
                ))}
              </div>
            </div>
          ))}

        {/* No Results */}
        {Object.keys(filteredTerms).length === 0 && (
          <div className="text-center py-16">
            <p className="text-xl text-[var(--text-secondary)]">
              No terms found matching your search criteria.
            </p>
            <button
              onClick={() => {
                setSearchQuery("");
                setSelectedLetter("");
              }}
              className="mt-4 px-6 py-3 rounded-full border border-white/20 hover:border-white/40 hover:bg-white/10 transition-colors"
            >
              Clear filters
            </button>
          </div>
        )}
      </section>

      {/* Background Pattern */}
      <div className="fixed inset-0 pointer-events-none overflow-hidden z-0 opacity-5">
        <div className="absolute top-20 left-10 w-32 h-32 border-2 border-current rounded-full"></div>
        <div className="absolute top-40 right-20 w-16 h-16 border-2 border-current rounded"></div>
        <div className="absolute bottom-40 left-20 w-24 h-24 border-2 border-current rounded-full"></div>
        <div className="absolute bottom-20 right-40 w-20 h-20 border-2 border-current rounded"></div>
      </div>
    </div>
  );
};

export default GlossaryPage;
